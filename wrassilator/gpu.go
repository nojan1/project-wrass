package main

import (
	"math/rand"

	rl "github.com/gen2brain/raylib-go/raylib"
)

type GpuRegister uint8
type ColorIndex = uint8

const (
	GpuControl GpuRegister = iota
	YOffset
	XOffset
	Increment
	AddressLow
	AddressHigh
	ReadWrite
	ScanlineHigh
	ScanlineLow
)

type GpuControlWord = uint8

const (
	IRQControlWord         GpuControlWord = 1 << 0
	BlankScreenControlWord GpuControlWord = 1 << 1
)

const (
	DisplayWidth         = 640
	DisplayHeight        = 480
	TotalCharCols        = 64
	TotalCharRows        = 32
	FramebufferStart     = 0x0000
	ColorAttributesStart = FramebufferStart + 0x0800
	TilemapStart         = ColorAttributesStart + 0x0800
	ColorsStart          = TilemapStart + 0x800
	MemoryTop            = ColorsStart + 0x80
)

type GPU struct {
	irqMultiplexer  *IRQMultiplexer
	vram            [MemoryTop + 1]uint8
	registerValues  [8]uint8
	currentScanline uint16
}

var TILEDATA = []uint8{
	0, 0, 0, 0, 0, 0, 0, 0, 24, 60, 60, 24, 24, 0, 24, 0, 54, 54, 0, 0, 0, 0, 0,
	0, 54, 54, 127, 54, 127, 54, 54, 0, 12, 62, 3, 30, 48, 31, 12, 0, 0, 99, 51,
	24, 12, 102, 99, 0, 28, 54, 28, 110, 59, 51, 110, 0, 6, 6, 3, 0, 0, 0, 0, 0,
	24, 12, 6, 6, 6, 12, 24, 0, 6, 12, 24, 24, 24, 12, 6, 0, 0, 102, 60, 255, 60,
	102, 0, 0, 0, 12, 12, 63, 12, 12, 0, 0, 0, 0, 0, 0, 0, 12, 12, 6, 0, 0, 0, 63,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 0, 96, 48, 24, 12, 6, 3, 1, 0, 62, 99, 115,
	123, 111, 103, 62, 0, 12, 14, 12, 12, 12, 12, 63, 0, 30, 51, 48, 28, 6, 51,
	63, 0, 30, 51, 48, 28, 48, 51, 30, 0, 56, 60, 54, 51, 127, 48, 120, 0, 63, 3,
	31, 48, 48, 51, 30, 0, 28, 6, 3, 31, 51, 51, 30, 0, 63, 51, 48, 24, 12, 12,
	12, 0, 30, 51, 51, 30, 51, 51, 30, 0, 30, 51, 51, 62, 48, 24, 14, 0, 0, 12,
	12, 0, 0, 12, 12, 0, 0, 12, 12, 0, 0, 12, 12, 6, 24, 12, 6, 3, 6, 12, 24, 0,
	0, 0, 63, 0, 0, 63, 0, 0, 6, 12, 24, 48, 24, 12, 6, 0, 30, 51, 48, 24, 12, 0,
	12, 0, 62, 99, 123, 123, 123, 3, 30, 0, 12, 30, 51, 51, 63, 51, 51, 0, 63,
	102, 102, 62, 102, 102, 63, 0, 60, 102, 3, 3, 3, 102, 60, 0, 31, 54, 102, 102,
	102, 54, 31, 0, 127, 70, 22, 30, 22, 70, 127, 0, 127, 70, 22, 30, 22, 6, 15,
	0, 60, 102, 3, 3, 115, 102, 124, 0, 51, 51, 51, 63, 51, 51, 51, 0, 30, 12, 12,
	12, 12, 12, 30, 0, 120, 48, 48, 48, 51, 51, 30, 0, 103, 102, 54, 30, 54, 102,
	103, 0, 15, 6, 6, 6, 70, 102, 127, 0, 99, 119, 127, 127, 107, 99, 99, 0, 99,
	103, 111, 123, 115, 99, 99, 0, 28, 54, 99, 99, 99, 54, 28, 0, 63, 102, 102,
	62, 6, 6, 15, 0, 30, 51, 51, 51, 59, 30, 56, 0, 63, 102, 102, 62, 54, 102,
	103, 0, 30, 51, 7, 14, 56, 51, 30, 0, 63, 45, 12, 12, 12, 12, 30, 0, 51, 51,
	51, 51, 51, 51, 63, 0, 51, 51, 51, 51, 51, 30, 12, 0, 99, 99, 99, 107, 127,
	119, 99, 0, 99, 99, 54, 28, 28, 54, 99, 0, 51, 51, 51, 30, 12, 12, 30, 0, 127,
	99, 49, 24, 76, 102, 127, 0, 30, 6, 6, 6, 6, 6, 30, 0, 3, 6, 12, 24, 48, 96,
	64, 0, 30, 24, 24, 24, 24, 24, 30, 0, 8, 28, 54, 99, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 12, 12, 24, 0, 0, 0, 0, 0, 0, 0, 30, 48, 62, 51, 110, 0, 7, 6,
	6, 62, 102, 102, 59, 0, 0, 0, 30, 51, 3, 51, 30, 0, 56, 48, 48, 62, 51, 51,
	110, 0, 0, 0, 30, 51, 63, 3, 30, 0, 28, 54, 6, 15, 6, 6, 15, 0, 0, 0, 110, 51,
	51, 62, 48, 31, 7, 6, 54, 110, 102, 102, 103, 0, 12, 0, 14, 12, 12, 12, 30, 0,
	48, 0, 48, 48, 48, 51, 51, 30, 7, 6, 102, 54, 30, 54, 103, 0, 14, 12, 12, 12,
	12, 12, 30, 0, 0, 0, 51, 127, 127, 107, 99, 0, 0, 0, 31, 51, 51, 51, 51, 0, 0,
	0, 30, 51, 51, 51, 30, 0, 0, 0, 59, 102, 102, 62, 6, 15, 0, 0, 110, 51, 51,
	62, 48, 120, 0, 0, 59, 110, 102, 6, 15, 0, 0, 0, 62, 3, 30, 48, 31, 0, 8, 12,
	62, 12, 12, 44, 24, 0, 0, 0, 51, 51, 51, 51, 110, 0, 0, 0, 51, 51, 51, 30, 12,
	0, 0, 0, 99, 107, 127, 127, 54, 0, 0, 0, 99, 54, 28, 54, 99, 0, 0, 0, 51, 51,
	51, 62, 48, 31, 0, 0, 63, 25, 12, 38, 63, 0, 56, 12, 12, 7, 12, 12, 56, 0, 24,
	24, 24, 0, 24, 24, 24, 0, 7, 12, 12, 56, 12, 12, 7, 0, 110, 59, 0, 0, 0, 0, 0,
	0, 128, 64, 32, 16, 8, 4, 2, 1, 1, 2, 4, 8, 16, 32, 64, 128, 129, 66, 36, 24,
	24, 36, 66, 129, 0, 0, 240, 8, 4, 228, 36, 36, 0, 0, 255, 0, 0, 255, 0, 0, 0,
	0, 15, 16, 32, 39, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 231, 0, 0,
	231, 36, 36, 36, 36, 228, 4, 8, 240, 0, 0, 36, 36, 39, 32, 16, 15, 0, 0, 48,
	88, 60, 118, 126, 126, 60, 24, 24, 28, 62, 246, 232, 100, 2, 1, 0, 102, 153,
	129, 66, 36, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 231,
	195, 195, 231, 231, 255, 231, 255, 201, 201, 255, 255, 255, 255, 255, 255,
	201, 201, 128, 201, 128, 201, 201, 255, 243, 193, 252, 225, 207, 224, 243,
	255, 255, 156, 204, 231, 243, 153, 156, 255, 227, 201, 227, 145, 196, 204,
	145, 255, 249, 249, 252, 255, 255, 255, 255, 255, 231, 243, 249, 249, 249,
	243, 231, 255, 249, 243, 231, 231, 231, 243, 249, 255, 255, 153, 195, 0, 195,
	153, 255, 255, 255, 243, 243, 192, 243, 243, 255, 255, 255, 255, 255, 255,
	255, 243, 243, 249, 255, 255, 255, 192, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 243, 243, 255, 159, 207, 231, 243, 249, 252, 254, 255, 193, 156,
	140, 132, 144, 152, 193, 255, 243, 241, 243, 243, 243, 243, 192, 255, 225,
	204, 207, 227, 249, 204, 192, 255, 225, 204, 207, 227, 207, 204, 225, 255,
	199, 195, 201, 204, 128, 207, 135, 255, 192, 252, 224, 207, 207, 204, 225,
	255, 227, 249, 252, 224, 204, 204, 225, 255, 192, 204, 207, 231, 243, 243,
	243, 255, 225, 204, 204, 225, 204, 204, 225, 255, 225, 204, 204, 193, 207,
	231, 241, 255, 255, 243, 243, 255, 255, 243, 243, 255, 255, 243, 243, 255,
	255, 243, 243, 249, 231, 243, 249, 252, 249, 243, 231, 255, 255, 255, 192,
	255, 255, 192, 255, 255, 249, 243, 231, 207, 231, 243, 249, 255, 225, 204,
	207, 231, 243, 255, 243, 255, 193, 156, 132, 132, 132, 252, 225, 255, 243,
	225, 204, 204, 192, 204, 204, 255, 192, 153, 153, 193, 153, 153, 192, 255,
	195, 153, 252, 252, 252, 153, 195, 255, 224, 201, 153, 153, 153, 201, 224,
	255, 128, 185, 233, 225, 233, 185, 128, 255, 128, 185, 233, 225, 233, 249,
	240, 255, 195, 153, 252, 252, 140, 153, 131, 255, 204, 204, 204, 192, 204,
	204, 204, 255, 225, 243, 243, 243, 243, 243, 225, 255, 135, 207, 207, 207,
	204, 204, 225, 255, 152, 153, 201, 225, 201, 153, 152, 255, 240, 249, 249,
	249, 185, 153, 128, 255, 156, 136, 128, 128, 148, 156, 156, 255, 156, 152,
	144, 132, 140, 156, 156, 255, 227, 201, 156, 156, 156, 201, 227, 255, 192,
	153, 153, 193, 249, 249, 240, 255, 225, 204, 204, 204, 196, 225, 199, 255,
	192, 153, 153, 193, 201, 153, 152, 255, 225, 204, 248, 241, 199, 204, 225,
	255, 192, 210, 243, 243, 243, 243, 225, 255, 204, 204, 204, 204, 204, 204,
	192, 255, 204, 204, 204, 204, 204, 225, 243, 255, 156, 156, 156, 148, 128,
	136, 156, 255, 156, 156, 201, 227, 227, 201, 156, 255, 204, 204, 204, 225,
	243, 243, 225, 255, 128, 156, 206, 231, 179, 153, 128, 255, 225, 249, 249,
	249, 249, 249, 225, 255, 252, 249, 243, 231, 207, 159, 191, 255, 225, 231,
	231, 231, 231, 231, 225, 255, 247, 227, 201, 156, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 0, 243, 243, 231, 255, 255, 255, 255, 255, 255,
	255, 225, 207, 193, 204, 145, 255, 248, 249, 249, 193, 153, 153, 196, 255,
	255, 255, 225, 204, 252, 204, 225, 255, 199, 207, 207, 193, 204, 204, 145,
	255, 255, 255, 225, 204, 192, 252, 225, 255, 227, 201, 249, 240, 249, 249,
	240, 255, 255, 255, 145, 204, 204, 193, 207, 224, 248, 249, 201, 145, 153,
	153, 152, 255, 243, 255, 241, 243, 243, 243, 225, 255, 207, 255, 207, 207,
	207, 204, 204, 225, 248, 249, 153, 201, 225, 201, 152, 255, 241, 243, 243,
	243, 243, 243, 225, 255, 255, 255, 204, 128, 128, 148, 156, 255, 255, 255,
	224, 204, 204, 204, 204, 255, 255, 255, 225, 204, 204, 204, 225, 255, 255,
	255, 196, 153, 153, 193, 249, 240, 255, 255, 145, 204, 204, 193, 207, 135,
	255, 255, 196, 145, 153, 249, 240, 255, 255, 255, 193, 252, 225, 207, 224,
	255, 247, 243, 193, 243, 243, 211, 231, 255, 255, 255, 204, 204, 204, 204,
	145, 255, 255, 255, 204, 204, 204, 225, 243, 255, 255, 255, 156, 148, 128,
	128, 201, 255, 255, 255, 156, 201, 227, 201, 156, 255, 255, 255, 204, 204,
	204, 193, 207, 224, 255, 255, 192, 230, 243, 217, 192, 255, 199, 243, 243,
	248, 243, 243, 199, 255, 231, 231, 231, 255, 231, 231, 231, 255, 248, 243,
	243, 199, 243, 243, 248, 255, 145, 196, 255, 255, 255, 255, 255, 255, 127,
	191, 223, 239, 247, 251, 253, 254, 254, 253, 251, 247, 239, 223, 191, 127,
	126, 189, 219, 231, 231, 219, 189, 126, 255, 255, 15, 247, 251, 27, 219, 219,
	255, 255, 0, 255, 255, 0, 255, 255, 255, 255, 240, 239, 223, 216, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 24, 255, 255, 24, 219, 219,
	219, 219, 27, 251, 247, 15, 255, 255, 219, 219, 216, 223, 239, 240, 255, 255,
	207, 167, 195, 137, 129, 129, 195, 231, 231, 227, 193, 9, 23, 155, 253, 254,
	255, 153, 102, 126, 189, 219, 231, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255}

var COLORS = []uint8{
	0x0,
	0xff,
	0b11010010,
	0b11010110,
	0b11010010,
	0b10010010,
	0b10010010,
	0b10110110,
	0b11010000,
	0b10010000,
	0b10011010,
	0b10010010,
	0b11011010,
	0b10011010,
	0b11011010,
	0b10010010,
}

func (s *GPU) Init() {
	s.registerValues = [8]uint8{0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0}

	for i := range TILEDATA {
		s.vram[TilemapStart+i] = TILEDATA[i]
	}

	for i := range COLORS {
		s.vram[ColorsStart+i] = COLORS[i]
	}

	for i := range TotalCharCols * TotalCharRows {
		s.vram[FramebufferStart+i] = uint8(rand.Int())
		s.vram[ColorAttributesStart+i] = uint8(rand.Int())
	}
}

func (s *GPU) Write(addr uint16, val uint8) {
	subAddr := GpuRegister(addr & 0x1F)
	if subAddr == ReadWrite {
		internalAddress := uint16(s.registerValues[AddressHigh])<<8 | uint16(s.registerValues[AddressLow])
		s.handleIncrement()

		if internalAddress < uint16(len(s.vram)) {
			s.vram[internalAddress] = val
		}
	} else if subAddr == ScanlineHigh || subAddr == ScanlineLow {
		// Writing to scanline registers is a no-op
	} else {
		s.registerValues[subAddr] = val
	}
}

func (s *GPU) Read(addr uint16, internal bool) uint8 {
	if internal {
		return 0
	}

	subAddr := GpuRegister(addr & 0x1F)

	if subAddr == ReadWrite {
		internalAddress := uint16(s.registerValues[AddressHigh])<<8 | uint16(s.registerValues[AddressLow])
		s.handleIncrement()

		if internalAddress < uint16(len(s.vram)) {
			return s.vram[internalAddress]
		} else {
			return 0
		}
	} else if subAddr == ScanlineHigh {
		return uint8(s.currentScanline >> 8)
	} else if subAddr == ScanlineLow {
		return uint8(s.currentScanline)
	} else {
		if subAddr == GpuControl {
			s.irqMultiplexer.ClearInterupt(GpuFrameIRQSource)
		}

		return s.registerValues[subAddr]
	}
}

func (s *GPU) handleIncrement() {
	if s.registerValues[Increment] > 0 {
		newLowAddress := s.registerValues[AddressLow] + s.registerValues[Increment]
		if newLowAddress < s.registerValues[AddressLow] {
			// Wrapped arround
			s.registerValues[AddressHigh] += 1
		}

		s.registerValues[AddressLow] = newLowAddress
	}
}

func (s *GPU) DrawFrameBuffer(x int32, y int32) {
	if s.registerValues[GpuControl]&BlankScreenControlWord != 0 {
		return
	}

	scrollX := uint16(s.registerValues[XOffset])
	scrollY := uint16(s.registerValues[YOffset])

	var cycle uint16
	// fmt.Printf("Using scrollX %v\n", scrollX)
	for s.currentScanline = 0; s.currentScanline < DisplayHeight; s.currentScanline++ {
		for cycle = 0; cycle < DisplayWidth; cycle++ {
			offsetCycle := ((cycle >> 1) + (512 - scrollX)) & 0x1ff
			offsetScanline := ((s.currentScanline >> 1) + (256 - scrollY)) & 0x0ff

			charColumn := offsetCycle >> 3
			charRow := offsetScanline >> 3

			framebufferAddress := (charRow << 6) | charColumn

			tileNumber := s.vram[FramebufferStart+framebufferAddress]

			charRenderColumn := offsetCycle & 0x7
			charRenderRow := offsetScanline & 0x7

			tileDataAddress := charRenderRow + (uint16(tileNumber) << 3)

			tileData := s.vram[TilemapStart+tileDataAddress]
			pixelOn := ((tileData >> charRenderColumn) & 0x1) == 1

			colorAttribute := s.vram[ColorAttributesStart+framebufferAddress]

			colorIndex := colorAttribute & 0xf
			if pixelOn {
				colorIndex = (colorAttribute >> 4) & 0xf
			}

			s.drawColoredPixel(x+int32(cycle), y+int32(s.currentScanline), colorIndex)
		}
	}

	if s.registerValues[GpuControl]&IRQControlWord != 0 {
		s.irqMultiplexer.SetInterupt(GpuFrameIRQSource)
	}
}

func (s *GPU) drawTileWithAttribute(xBase int32, yBase int32, tileNumber uint8, colorAttribute uint8, scale int32) {
	var y, x int32
	for y = 0; y < 8; y++ {
		rowPattern := s.vram[TilemapStart+(int32(tileNumber)*8)+y]
		for x = 0; x < 8; x++ {
			pixelOn := rowPattern&(1<<x) != 0
			colorIndex := colorAttribute & 0xf

			if pixelOn {
				colorIndex = (colorAttribute >> 4) & 0xf
			}

			if scale > 1 {
				rlColor := s.rlColorFromIndex(colorIndex)

				rl.DrawRectangle(
					xBase+(x*scale),
					yBase+(y*scale),
					scale,
					scale,
					rlColor,
				)
			} else {
				s.drawColoredPixel(xBase+x, yBase+y, colorIndex)
			}
		}
	}
}

func (s *GPU) rlColorFromIndex(colorIndex ColorIndex) rl.Color {
	color := s.vram[ColorsStart+uint16(colorIndex)]

	return rl.Color{
		A: 0xFF,
		R: ((color >> 6) & 0b11) * 64,
		G: ((color >> 3) & 0b111) * 32,
		B: ((color >> 0) & 0b111) * 32,
	}
}

func (s *GPU) drawColoredPixel(x int32, y int32, colorIndex ColorIndex) {
	rlColor := s.rlColorFromIndex(colorIndex)
	rl.DrawPixel(x, y, rlColor)
}
